[{"name":"app.R","content":"# app.R — Split-normal (mean/median/mode) — ShinyLive ready\nlibrary(shiny)\nlibrary(bslib)\n\n# ----- split-normal helpers (no extra packages) -----\ndsplitnorm <- function(x, mu, sL, sR) {\n  cst <- sqrt(2 / pi) / (sL + sR)\n  y <- numeric(length(x))\n  left <- x <= mu\n  y[left]  <- cst * exp(-0.5 * ((x[left]  - mu) / sL)^2)\n  y[!left] <- cst * exp(-0.5 * ((x[!left] - mu) / sR)^2)\n  y\n}\nmean_splitnorm <- function(mu, sL, sR) mu + sqrt(2 / pi) * (sR - sL)\n\nmap_params_simple <- function(m, med, mu, floor_sigma = 3, width_base = 6, c_med = 4) {\n  D <- (m - mu) / sqrt(2 / pi)\n  w_raw <- 0.5 + 0.5 * tanh((mu - med) / c_med)\n  w <- min(max(w_raw, 0.05), 0.95)\n  sep <- mean(abs(c(m - mu, med - mu, m - med)))\n  T_core <- width_base + 2 * sep\n  sL0 <- w * T_core - D/2\n  sR0 <- (1 - w) * T_core + D/2\n  bump <- max(0, floor_sigma - min(sL0, sR0))\n  sL <- max(sL0 + bump, 1e-3); sR <- max(sR0 + bump, 1e-3)\n  list(mu = mu, sL = sL, sR = sR)\n}\n\n# ----- Theme tokens -----\nLIGHT_BLUE <- \"#767da2\"  # inputs + slider + borders\nLIGHT_GREY <- \"#d1d4e0\"  # median guide\nORANGE     <- \"#cd6118\"  # mean guide (accent)\nGREEN      <- \"#009E73\"  # mode guide\n\n# ---- Theme (no font_google / no thematic_shiny) ----\ndark_theme <- bs_theme(\n  version   = 5,\n  bg        = \"#1d1f2b\",\n  fg        = \"#e1e2ea\",\n  primary   = ORANGE,\n  secondary = \"#5a5f80\"\n) |>\n  # set fonts via CSS variables; fonts are loaded in <head> (see UI)\n  bs_add_rules(\"\n    :root{\n      --bs-body-font-family: 'Lexend', system-ui, -apple-system, Segoe UI, Roboto, 'Helvetica Neue', Arial, sans-serif;\n      --bs-font-monospace: 'Recursive', ui-monospace, SFMono-Regular, Menlo, Consolas, 'Liberation Mono', monospace;\n    }\n  \") |>\n  bs_add_rules(paste0(\"\n    /* Container: fixed width + top breathing room (with iOS safe-area) */\n    .container-fluid{\n      max-width: 1100px;\n      padding-top: 16px;\n      padding-top: calc(16px + env(safe-area-inset-top));\n    }\n\n    .shiny-input-container { margin-bottom: 10px; }\n\n    /* Desktop/tablet layout: side-by-side */\n    .no-stack { display:flex; gap:16px; align-items:flex-start; }\n    .no-stack .left  { flex:0 0 320px; min-width:260px; }\n    .no-stack .right { flex:1 1 auto; min-width:0; }\n\n    /* Plot panel: page bg + light-blue border */\n    #plotBox{\n      background: var(--bs-body-bg) !important;\n      border: 1.5px solid \", LIGHT_BLUE, \" !important;\n      padding: 12px;\n      border-radius: .6rem;\n      box-shadow: none;\n    }\n\n    /* Inputs: lighter blue background */\n    .form-control, .form-select, .selectize-input{\n      background-color: \", LIGHT_BLUE, \" !important;\n      color: var(--bs-body-color) !important;\n      border: 1px solid \", LIGHT_BLUE, \" !important;\n      box-shadow: none !important;\n    }\n    .form-control:focus, .form-select:focus, .selectize-input.focus{\n      border-color: \", ORANGE, \" !important;\n      outline: 0 !important;\n      box-shadow: 0 0 0 .15rem rgba(205,97,24,.35) !important;\n    }\n\n    /* Sliders (ionRangeSlider) — LIGHT BLUE */\n    .irs--shiny .irs-bar,\n    .irs--shiny .irs-handle>i:first-child,\n    .irs--shiny .irs-handle{\n      background: \", LIGHT_BLUE, \" !important;\n      border-color: \", LIGHT_BLUE, \" !important;\n    }\n    .irs--shiny .irs-line,\n    .irs--shiny .irs-bar-edge{\n      background: #5a5f80 !important;\n      border-color: #5a5f80 !important;\n    }\n    .irs--shiny .irs-single,\n    .irs--shiny .irs-from,\n    .irs--shiny .irs-to,\n    .irs--shiny .irs-min,\n    .irs--shiny .irs-max,\n    .irs--shiny .irs-grid-text{\n      color: var(--bs-body-color) !important;\n    }\n\n    .legend-dot { display:inline-block; width:14px; height:14px; border-radius:7px; margin-right:6px; }\n    .legend-item { margin-bottom: 6px; }\n    .sidebar-title { margin-top: 8px; font-weight: 600; }\n\n    /* Mobile: stack panes + comfy padding */\n    @media (max-width: 576px){\n      .no-stack{ flex-direction: column; gap:12px; }\n      .no-stack .left, .no-stack .right{ flex:1 1 100%; min-width:0; }\n\n      .no-stack .left .shiny-input-container .control-label { margin-top: 12px; }\n      .no-stack .left .shiny-input-container:first-of-type .control-label { margin-top: 8px; }\n\n      .container-fluid{\n        padding-top: 20px;\n        padding-top: calc(20px + env(safe-area-inset-top));\n        padding-left: 12px;\n        padding-right: 12px;\n      }\n    }\n  \"))\n\n# ----- UI -----\nui <- page_fluid(\n  theme = dark_theme,\n  tags$head(\n    # Load fonts in the browser (no R download/curl)\n    tags$link(rel = \"preconnect\", href = \"https://fonts.googleapis.com\"),\n    tags$link(rel = \"preconnect\", href = \"https://fonts.gstatic.com\", crossorigin = \"anonymous\"),\n    tags$link(\n      href = \"https://fonts.googleapis.com/css2?family=Lexend:wght@300;400;500&family=Recursive:wght,MONO@400,1&display=swap\",\n      rel  = \"stylesheet\"\n    ),\n    # auto-resize when embedded in a Quarto iframe\n    tags$script(src = \"https://cdn.jsdelivr.net/npm/iframe-resizer/js/iframeResizer.contentWindow.min.js\"),\n    tags$script(HTML(\"\n      document.addEventListener('shiny:idle', function(){\n        if (window.parentIFrame && window.parentIFrame.size) window.parentIFrame.size();\n      });\n    \"))\n  ),\n  \n  div(class = \"no-stack\",\n      div(class = \"left\",\n          sliderInput(\"mean\",   \"Mean\",        min = -20, max = 20, value = 0, step = 0.1),\n          sliderInput(\"median\", \"Median\",      min = -20, max = 20, value = 0, step = 0.1),\n          sliderInput(\"mode\",   \"Mode (peak)\", min = -20, max = 20, value = 0, step = 0.1),\n          div(class = \"sidebar-title\", \"Colour key\"),\n          div(class = \"legend-item\", span(class=\"legend-dot\", style = paste0(\"background:\", ORANGE)),     \"Mean\"),\n          div(class = \"legend-item\", span(class=\"legend-dot\", style = paste0(\"background:\", LIGHT_GREY)), \"Median\"),\n          div(class = \"legend-item\", span(class=\"legend-dot\", style = paste0(\"background:\", GREEN)),      \"Mode\"),\n          br(),\n          actionButton(\"reset\", \"Reset to 0,0,0\", class = \"btn btn-secondary\")\n      ),\n      div(class = \"right\",\n          div(id = \"plotBox\",\n              plotOutput(\"plot\"),\n              br(),\n              tags$small(textOutput(\"stats\"))\n          )\n      )\n  )\n)\n\n# ----- Server -----\nserver <- function(input, output, session) {\n  observeEvent(input$reset, {\n    updateSliderInput(session, \"mean\",   value = 0)\n    updateSliderInput(session, \"median\", value = 0)\n    updateSliderInput(session, \"mode\",   value = 0)\n  })\n  \n  output$plot <- renderPlot({\n    m   <- input$mean\n    med <- input$median\n    mu  <- input$mode\n    p   <- map_params_simple(m, med, mu)\n    \n    # X-range based on asymmetric spreads\n    left_span  <- 3 * p$sL\n    right_span <- 3 * p$sR\n    x_min <- min(-20, mu - left_span)\n    x_max <- max( 20, mu + right_span)\n    pad   <- 0.03 * (x_max - x_min)\n    x_min <- x_min - pad\n    x_max <- x_max + pad\n    \n    x <- seq(x_min, x_max, length.out = 1600)\n    y <- dsplitnorm(x, p$mu, p$sL, p$sR)\n    y_max <- suppressWarnings(max(y, na.rm = TRUE)); if (!is.finite(y_max) || y_max <= 0) y_max <- 1e-6\n    \n    # Use container width only (always available)\n    wcd   <- session$clientData$output_plot_width\n    w_use <- if (is.null(wcd) || !is.finite(wcd) || wcd <= 0) 360 else wcd\n    tiny  <- (w_use < 420)\n    \n    op <- par(no.readonly = TRUE); on.exit(par(op), add = TRUE)\n    par(\n      fg = \"#e1e2ea\", col.axis = \"#e1e2ea\", col.lab = \"#e1e2ea\", col = \"#e1e2ea\",\n      mar  = if (tiny) c(3.0, 3.2, 1.8, 0.8) else c(4.6, 4.6, 3.0, 1.2),\n      mgp  = if (tiny) c(1.9, 0.5, 0)        else c(2.5, 0.8, 0),\n      xaxs = if (tiny) \"i\" else \"r\",\n      yaxs = if (tiny) \"i\" else \"r\",\n      cex.axis = if (tiny) 0.90 else 1.00,\n      cex.lab  = if (tiny) 0.95 else 1.05\n    )\n    \n    # Axes + curve\n    plot(x, y, type = \"n\",\n         xlab = \"\", ylab = \"Density\",\n         xlim = c(x_min, x_max),\n         ylim = c(0, y_max * (if (tiny) 1.06 else 1.14)),\n         axes = TRUE, frame.plot = TRUE)\n    lines(x, y, lwd = 2)\n    \n    # Guides\n    abline(v = m,   col = ORANGE,     lwd = 2)\n    abline(v = med, col = LIGHT_GREY, lwd = 2)\n    abline(v = mu,  col = GREEN,      lwd = 2)\n    \n    # Labels\n    usr   <- par(\"usr\")\n    y_lab <- usr[4] - (if (tiny) 0.07 else 0.09) * diff(usr[3:4])\n    clamp <- function(z, lo = x_min, hi = x_max) pmin(hi, pmax(lo, z))\n    text(clamp(m),   y_lab, \"Mean\",   col = ORANGE,     cex = if (tiny) 0.85 else 0.95)\n    text(clamp(med), y_lab, \"Median\", col = LIGHT_GREY, cex = if (tiny) 0.85 else 0.95)\n    text(clamp(mu),  y_lab, \"Mode\",   col = GREEN,      cex = if (tiny) 0.85 else 0.95)\n  },\n  # ensure non-zero device width on first render (mobile)\n  width = function() {\n    w <- session$clientData$output_plot_width\n    if (is.null(w) || !is.finite(w) || w <= 0) w <- 360\n    round(max(280, min(1100, w)))\n  },\n  height = function() {\n    w <- session$clientData$output_plot_width\n    if (is.null(w) || !is.finite(w) || w <= 0) w <- 360\n    round(max(260, min(520, 0.60 * w)))\n  },\n  res = 96, execOnResize = TRUE,\n  bg = \"transparent\"\n  )\n  \n  # Optional stats output — uncomment if you want it visible\n  # output$stats <- renderText({\n  #   m <- input$mean; med <- input$median; mu <- input$mode\n  #   p <- map_params_simple(m, med, mu)\n  #   sprintf(\n  #     'mean = %.2f, median = %.2f, mode = %.2f  |  sL = %.2f, sR = %.2f  |  curve mean ≈ %.2f',\n  #     m, med, mu, p$sL, p$sR, mean_splitnorm(p$mu, p$sL, p$sR)\n  #   )\n  # })\n}\n\nshinyApp(ui, server)\n","type":"text"},{"name":"Shiny Upload.R","content":"\n# 1. Install and load rsconnect\ninstall.packages(\"rsconnect\")\nlibrary(rsconnect)\n\n# 2. Connect R to my shinyapps.io account\n# Run this once on your machine (you can find the info in your shinyapps.io dashboard under Tokens):\n\nrsconnect::setAccountInfo(name='drflorianreiche',\n                          token='B18DD6C3B257DBDB66154A0808E81DDC',\n                          secret='q6XwNl4ha6DchuHWAcH6/MKCA1XbYs606zWdl9NB')\n\n# 3. Prepare your Shiny app\n\nshiny::runApp(\"~/Dropbox/AQDR/shiny/shiny-mean-median-mode\")\n\n# 4. Deploy / update the app\n\nrsconnect::deployApp(\"~/Dropbox/AQDR/shiny/shiny-mean-median-mode\")\n\n","type":"text"}]
