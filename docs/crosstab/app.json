[{"name":"app.R","content":"# app.R  — ShinyLive-ready\nlibrary(shiny)\nlibrary(bslib)\n\n# ---- Colors ----\nLIGHT_BLUE  <- \"#767da2\"  # inputs\nLIGHT_GREY  <- \"#a4aac1\"  # first bar (replaces blue)\nORANGE_BAR  <- \"#cd6118\"  # keep your orange\n\ndark_theme <- bs_theme(\n  version = 5,\n  bg = \"#1d1f2b\", fg = \"#e1e2ea\",\n  primary = \"#cd6118\", secondary = \"#5a5f80\"\n) |>\n  bs_add_rules(\"\n    :root{\n      --bs-body-font-family: 'Lexend', system-ui, -apple-system, Segoe UI, Roboto, 'Helvetica Neue', Arial, sans-serif;\n      --bs-font-monospace: 'Recursive', ui-monospace, SFMono-Regular, Menlo, Consolas, 'Liberation Mono', monospace;\n    }\n  \") |>\n  bs_add_rules(sprintf(\"\n    .container-fluid{ max-width:1100px; padding-top:calc(16px + env(safe-area-inset-top)); }\n    .shiny-input-container{ margin-bottom:10px; }\n    .no-stack{ display:flex; gap:16px; align-items:flex-start; }\n    .no-stack .left{ flex:0 0 330px; min-width:260px; }\n    .no-stack .right{ flex:1 1 auto; min-width:0; }\n    .no-stack .left h4{ margin-top:14px; }\n    #ifr-root{ padding-bottom:32px; }\n\n    #tabBox{\n      background: var(--bs-body-bg) !important;\n      border: 1.5px solid %1$s !important;\n      padding: 12px; border-radius: .6rem; box-shadow:none;\n    }\n    #stats{ font-size:16px; margin-top:10px; }\n    #tabBox strong{ color: var(--bs-body-color); }\n\n    .form-control, .form-select, .selectize-input{\n      background-color:%1$s !important; color:var(--bs-body-color) !important;\n      border:1px solid %1$s !important; box-shadow:none !important;\n    }\n    .form-control:focus, .form-select:focus, .selectize-input.focus{\n      border-color:#cd6118 !important; outline:0 !important;\n      box-shadow:0 0 0 .15rem rgba(205,97,24,.35) !important;\n    }\n    .selectize-dropdown, .selectize-dropdown .active{\n      background:#44496f !important; color:var(--bs-body-color) !important; border-color:#5a5f80 !important;\n    }\n\n    table, th, td{\n      color:var(--bs-body-color) !important; background-color:transparent !important;\n      border-color:#adbdd1 !important; font-size:.95em;\n    }\n    thead, caption{ color:var(--bs-body-color) !important; }\n\n    @media (max-width:576px){\n      .no-stack{ flex-direction:column; gap:12px; }\n      .no-stack .left, .no-stack .right{ flex:1 1 100%%; min-width:0; }\n      .no-stack .left h4{ margin-top:10px; }\n      .container-fluid{\n        padding-top:calc(20px + env(safe-area-inset-top)); padding-left:12px; padding-right:12px;\n      }\n    }\n  \", LIGHT_BLUE))\n\nui <- page_fluid(\n  theme = dark_theme,\n  tags$head(\n    # --- Google Fonts (load in the browser; no R downloads) ---\n    tags$link(rel = \"preconnect\", href = \"https://fonts.googleapis.com\"),\n    tags$link(rel = \"preconnect\", href = \"https://fonts.gstatic.com\", crossorigin = \"anonymous\"),\n    tags$link(\n      href = \"https://fonts.googleapis.com/css2?family=Lexend:wght@300;400;500&family=Recursive:wght,MONO@400,1&display=swap\",\n      rel  = \"stylesheet\"\n    ),\n    \n    # iFrame Resizer (safe when embedded)\n    tags$script(src = \"https://cdn.jsdelivr.net/npm/iframe-resizer/js/iframeResizer.contentWindow.min.js\"),\n    tags$script(HTML(\n      \"document.addEventListener('shiny:idle', function () {\n         if (window.parentIFrame && window.parentIFrame.size) { window.parentIFrame.size(); }\n       });\"\n    ))\n  ),\n  \n  div(id = \"ifr-root\", `data-iframe-height` = \"true\",\n      div(class = \"no-stack\",\n          div(class = \"left\",\n              h4(\"Cell counts (2×2)\"),\n              fluidRow(\n                column(6, numericInput(\"a\", \"Row 1 • Col 1 (a)\", 12, min = 0, step = 1)),\n                column(6, numericInput(\"b\", \"Row 1 • Col 2 (b)\",  8, min = 0, step = 1))\n              ),\n              fluidRow(\n                column(6, numericInput(\"c\", \"Row 2 • Col 1 (c)\",  5, min = 0, step = 1)),\n                column(6, numericInput(\"d\", \"Row 2 • Col 2 (d)\", 15, min = 0, step = 1))\n              ),\n              h4(\"Labels\"),\n              fluidRow(\n                column(6, textInput(\"r1\", \"Row 1\", \"Group A\")),\n                column(6, textInput(\"r2\", \"Row 2\", \"Group B\"))\n              ),\n              fluidRow(\n                column(6, textInput(\"c1\", \"Col 1\", \"Yes\")),\n                column(6, textInput(\"c2\", \"Col 2\", \"No\"))\n              ),\n              h4(\"Display\"),\n              selectInput(\"view\", \"Show values as:\", c(\"Counts\",\"Row %\",\"Column %\",\"Total %\")),\n              checkboxInput(\"show_exp\", \"Show expected counts table\", FALSE),\n              actionButton(\"reset\", \"Reset\", class = \"btn btn-secondary\")\n          ),\n          div(class = \"right\",\n              div(id = \"tabBox\",\n                  strong(textOutput(\"tblTitle\", inline = TRUE)),\n                  tableOutput(\"xtab\"),\n                  uiOutput(\"expBox\")\n              ),\n              br(),\n              plotOutput(\"barPlot\"),\n              div(id = \"stats\", textOutput(\"summary\"))\n          )\n      )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  xtab_counts <- reactive({\n    mat <- matrix(\n      c(input$a, input$b, input$c, input$d),\n      nrow = 2, byrow = TRUE,\n      dimnames = list(\n        c(input$r1, input$r2),\n        c(input$c1, input$c2)\n      )\n    )\n    mat[is.na(mat) | mat < 0] <- 0\n    round(mat, 0)\n  })\n  \n  observeEvent(input$reset, {\n    updateNumericInput(session, \"a\", value = 12)\n    updateNumericInput(session, \"b\", value = 8)\n    updateNumericInput(session, \"c\", value = 5)\n    updateNumericInput(session, \"d\", value = 15)\n    updateTextInput(session, \"r1\", value = \"Group A\")\n    updateTextInput(session, \"r2\", value = \"Group B\")\n    updateTextInput(session, \"c1\", value = \"Yes\")\n    updateTextInput(session, \"c2\", value = \"No\")\n    updateSelectInput(session, \"view\", selected = \"Counts\")\n    updateCheckboxInput(session, \"show_exp\", value = FALSE)\n  })\n  \n  output$tblTitle <- renderText({\n    switch(input$view,\n           \"Counts\"   = \"Observed counts\",\n           \"Row %\"    = \"Row percentages\",\n           \"Column %\" = \"Column percentages\",\n           \"Total %\"  = \"Total percentages\"\n    )\n  })\n  \n  output$xtab <- renderTable({\n    K <- xtab_counts()\n    N <- sum(K)\n    if (N == 0) return(matrix(\"\", nrow = 2, ncol = 2))\n    \n    show <- switch(input$view,\n                   \"Counts\"   = addmargins(K),\n                   \"Row %\"    = { P <- 100 * sweep(K, 1, rowSums(K), \"/\"); P[!is.finite(P)] <- 0; addmargins(P) },\n                   \"Column %\" = { P <- 100 * sweep(K, 2, colSums(K), \"/\"); P[!is.finite(P)] <- 0; addmargins(P) },\n                   \"Total %\"  = addmargins(100 * K / N)\n    )\n    if (input$view == \"Counts\") round(show, 0) else apply(show, c(1, 2), function(x) sprintf('%.1f%%', x))\n  }, rownames = TRUE, colnames = TRUE, bordered = TRUE, spacing = \"s\")\n  \n  output$expBox <- renderUI({\n    if (!isTRUE(input$show_exp)) return(NULL)\n    tagList(br(), strong(\"Expected counts (under independence)\"), tableOutput(\"xtabExp\"))\n  })\n  \n  output$xtabExp <- renderTable({\n    K <- xtab_counts()\n    N <- sum(K)\n    if (N == 0) return(matrix(\"\", nrow = 2, ncol = 2))\n    E <- outer(rowSums(K), colSums(K)) / N\n    round(addmargins(E), 2)\n  }, rownames = TRUE, colnames = TRUE, bordered = TRUE, spacing = \"s\")\n  \n  # --- Bars (explicit colors so it looks right without 'thematic') ---\n  output$barPlot <- renderPlot({\n    K <- xtab_counts(); if (sum(K) == 0) return()\n    \n    # Device width works both standalone and in an iframe\n    w <- session$clientData$output_barPlot_width\n    if (is.null(w) || !is.finite(w) || w <= 0) w <- 700\n    tiny <- (w < 520)\n    \n    par(\n      # normal bottom margin; no drawing outside the panel\n      mar = if (tiny) c(4.2, 4.6, 1.6, 1) + 0.1 else c(4.0, 4.6, 2.0, 1) + 0.1,\n      cex.lab = 1.15, cex.axis = 1.05,\n      col.lab = \"#e1e2ea\", col.axis = \"#dfe1ec\", fg = \"#adbdd1\",\n      xpd = FALSE\n    )\n    \n    P <- prop.table(K, 1)\n    \n    # ← extra headroom so the legend can live inside the plot safely\n    ylim_top <- if (tiny) 1.10 else 1.06\n    \n    bp <- barplot(\n      t(P),\n      beside = FALSE,\n      col    = c(LIGHT_GREY, ORANGE_BAR),\n      ylim   = c(0, ylim_top),\n      border = NA,\n      ylab   = \"Row proportion\",\n      xaxt   = \"n\", yaxt = \"s\"\n    )\n    axis(1, at = bp, labels = rownames(K), tick = FALSE)\n    \n    # Legend INSIDE the plot: no negative inset, no clipping\n    legend(\"topright\",\n           inset = c(0.02, 0.02), bty = \"n\",\n           legend = colnames(K), fill = c(LIGHT_GREY, ORANGE_BAR),\n           cex = 0.95, x.intersp = 0.8, y.intersp = 0.9, text.col = \"#e1e2ea\")\n  },\n  height = function() {\n    w <- session$clientData$output_barPlot_width\n    if (is.null(w) || !is.finite(w)) w <- 700\n    # a touch taller on narrow iframes so the inside legend breathes\n    h <- if (w < 520) 0.62 * w else 0.50 * w\n    round(max(260, min(520, h)))\n  },\n  res = 96,\n  bg  = \"transparent\")\n  \n  \n  output$summary <- renderText({\n    K <- xtab_counts()\n    N <- sum(K)\n    if (N == 0) return('No data yet.')\n    suppressWarnings({ ct <- chisq.test(K, correct = FALSE) })\n    chi2 <- unname(ct$statistic); df <- unname(ct$parameter); p <- ct$p.value\n    phi  <- if (N > 0) sqrt(chi2 / N) else NA_real_\n    if (any(ct$expected < 5)) {\n      fp <- tryCatch(fisher.test(K)$p.value, error = function(e) NA_real_)\n      sprintf('N = %d  |  χ²(%d) = %.3f  p = %.4f  |  φ = %.3f  |  Fisher p = %.4f (expected < 5)',\n              N, df, chi2, p, phi, fp)\n    } else {\n      sprintf('N = %d  |  χ²(%d) = %.3f  p = %.4f  |  φ = %.3f', N, df, chi2, p, phi)\n    }\n  })\n}\n\nshinyApp(ui, server)\n","type":"text"},{"name":"Shiny Upload.R","content":"\n# 1. Install and load rsconnect\n#install.packages(\"rsconnect\")\nlibrary(rsconnect)\n\n# 2. Connect R to my shinyapps.io account\n# Run this once on your machine (you can find the info in your shinyapps.io dashboard under Tokens):\n\nrsconnect::setAccountInfo(name='drflorianreiche',\n                          token='B18DD6C3B257DBDB66154A0808E81DDC',\n                          secret='q6XwNl4ha6DchuHWAcH6/MKCA1XbYs606zWdl9NB')\n\n# 3. Prepare your Shiny app\n\nshiny::runApp(\"~/Dropbox/AQDR/shiny/shiny_crosstab\")\n\n# 4. Deploy / update the app\n\nrsconnect::deployApp(\"~/Dropbox/AQDR/shiny/shiny_crosstab\")\n\n","type":"text"}]
