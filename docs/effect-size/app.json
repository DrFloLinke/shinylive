[{"name":"app.R","content":"# app.R — One-sample t-test (Intro Stats) • Evaluate a completed test\n# -------------------------------------------------------------------\n# Practical mode: students enter the observed t and n from their test.\n# The app computes d_hat = t/sqrt(n), shows power at the observed n,\n# and plots Power vs n assuming that effect (for replication planning).\n# Optional: override with a SESOI (small/medium/large) instead of d_hat.\n# SESOI mode shows an orange \"required n for 80% power\" marker.\n\n# Detect Shinylive/webR (Wasm)\nis_webr <- grepl(\"wasm\", R.version$platform)\n\n# Install needed packages in the browser (no-op on desktop R)\nif (requireNamespace(\"webr\", quietly = TRUE)) {\n  webr::install(c(\n    \"shiny\",\n    \"bslib\",\n    \"ggplot2\",\n    \"scales\",\n    \"munsell\"\n  ))\n}\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(bslib)\n\n# Optional theming helper: avoid runtime Google font downloads in Shinylive\n# In Shinylive we use system font stacks; on desktop we use Google fonts.\nif (!is_webr) {\n  # Only load thematic + Google fonts when NOT in Shinylive\n  if (requireNamespace(\"thematic\", quietly = TRUE)) {\n    thematic::thematic_shiny()\n  }\n  base_font_val <- bslib::font_google(\"Lexend\")\n  code_font_val <- bslib::font_google(\"Recursive\")\n} else {\n  # System font stacks work everywhere and require no downloads\n  base_font_val <- \"system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif\"\n  code_font_val <- \"ui-monospace, SFMono-Regular, Menlo, Consolas, 'Liberation Mono', monospace\"\n}\n\n# --- Tokens ---------------------------------------------------------------\nLIGHT_BLUE <- \"#767da2\"  # inputs + slider + borders\nORANGE     <- \"#cd6118\"  # brand / primary\n\n# --- Theme + CSS ----------------------------------------------------------\ndark_theme <- bs_theme(\n  version   = 5,\n  bg        = \"#1d1f2b\",\n  fg        = \"#e1e2ea\",\n  primary   = ORANGE,\n  secondary = \"#5a5f80\",\n  base_font = base_font_val,\n  code_font = code_font_val\n)\n\ncss_rules <- paste(\n  \".container-fluid { max-width: 1100px; }\",\n  \".shiny-input-container { margin-bottom: 10px; }\",\n  \"/* Top breathing room + iOS safe-area support */\",\n  \".container-fluid{ max-width: 1100px; padding-top: 16px;\",\n  \"  padding-top: calc(16px + env(safe-area-inset-top)); }\",\n  \"@media (max-width: 576px){ .container-fluid{ padding-top: 20px;\",\n  \"  padding-top: calc(20px + env(safe-area-inset-top)); } }\",\n  \"/* Title size */\",\n  \"h2.title { font-size: 20px; line-height: 1.25; margin: 6px 0 10px; font-weight: 600; }\",\n  \"@media (max-width: 576px) { h2.title { font-size: 18px; } }\",\n  \"/* Side-by-side layout that stacks on mobile */\",\n  \".no-stack { display: flex; gap: 16px; align-items: flex-start; }\",\n  \".no-stack .left  { flex: 0 0 320px; min-width: 260px; }\",\n  \".no-stack .right { flex: 1 1 auto; min-width: 0; }\",\n  \"@media (max-width: 576px) {\",\n  \"  .no-stack { flex-direction: column; gap: 12px; }\",\n  \"  .no-stack .left, .no-stack .right { flex: 1 1 100%; min-width: 0; }\",\n  \"  .container-fluid { padding-left: 12px; padding-right: 12px; }\",\n  \"}\",\n  sprintf(\"#plotBox{ background: var(--bs-body-bg) !important; border: 1.5px solid %s !important; padding: 12px; border-radius: .6rem; box-shadow: none; }\", LIGHT_BLUE),\n  sprintf(\".form-control, .form-select, .selectize-input{ background-color: %s !important; color: var(--bs-body-color) !important; border: 1px solid %s !important; box-shadow: none !important; }\", LIGHT_BLUE, LIGHT_BLUE),\n  sprintf(\".form-control:focus, .form-select:focus, .selectize-input.focus{ border-color: %s !important; outline: 0 !important; box-shadow: 0 0 0 .15rem rgba(205,97,24,.35) !important; }\", ORANGE),\n  \".selectize-dropdown{ background: #2b2f49 !important; color: var(--bs-body-color) !important; border-color: #5a5f80 !important; }\",\n  \".selectize-dropdown .active, .selectize-dropdown .option:hover{ background: #5a5f80 !important; color: #ffffff !important; }\",\n  \"/* Slider typography + thickness */\",\n  \".irs--shiny .irs-single, .irs--shiny .irs-from, .irs--shiny .irs-to, .irs--shiny .irs-min, .irs--shiny .irs-max { font-size: 16px; font-weight: 600; }\",\n  \".irs--shiny .irs-grid-text { font-size: 14px; }\",\n  \".irs--shiny .irs-line, .irs--shiny .irs-bar, .irs--shiny .irs-bar-edge { height: 6px; }\",\n  sprintf(\".irs--shiny .irs-bar, .irs--shiny .irs-handle>i:first-child, .irs--shiny .irs-handle{ background: %s !important; border-color: %s !important; }\", LIGHT_BLUE, LIGHT_BLUE),\n  \".irs--shiny .irs-line, .irs--shiny .irs-bar-edge{ background: #5a5f80 !important; border-color: #5a5f80 !important; }\",\n  \".irs--shiny .irs-single, .irs--shiny .irs-from, .irs--shiny .irs-to, .irs--shiny .irs-min, .irs--shiny .irs-max, .irs--shiny .irs-grid-text{ color: var(--bs-body-color) !important; }\",\n  \"/* Orange-when-checked checkboxes */\",\n  \"input.form-check-input:checked{\",\n  sprintf(\"  background-color: %s !important; border-color: %s !important;\", ORANGE, ORANGE),\n  \"  box-shadow: none !important;\",\n  \"}\",\n  \"/* Compact tables */\",\n  \"#rule_table table, #summary_table table { font-size: 13px; }\",\n  \"#rule_table table th, #rule_table table td, #summary_table table th, #summary_table table td { padding: 4px 8px; line-height: 1.6; }\",\n  \"@media (max-width: 576px){ #rule_table table, #summary_table table { font-size: 12px; } }\",\n  \"/* Align table header baselines across the two tables */\",\n  \"#rule_table table thead th,\",\n  \"#summary_table table thead th {\",\n  \"  white-space: nowrap;\",\n  \"  font-size: 12px;\",\n  \"  line-height: 1.1;\",\n  \"  padding-top: 4px;\",\n  \"  padding-bottom: 6px;\",\n  \"  vertical-align: bottom;\",\n  \"}\",\n  \"@media (max-width: 576px){\",\n  \"  #rule_table table thead th, #summary_table table thead th { font-size: 11px; }\",\n  \"}\",\n  \"/* Bottom breathing room + iOS safe-area */\",\n  \".container-fluid{ padding-bottom: 18px; padding-bottom: calc(18px + env(safe-area-inset-bottom)); }\",\n  \"#plotBox{ padding-bottom: 16px; margin-bottom: 10px; }\",\n  sep = \"\\n\", collapse = \"\\n\"\n)\ndark_theme <- bs_add_rules(dark_theme, css_rules)\n\n# --- Helper: one-sample power --------------------------------------------\npower_one_sample <- function(d, n, alpha = 0.05) {\n  stats::power.t.test(\n    n = n, delta = d, sd = 1,\n    sig.level = alpha, type = \"one.sample\", alternative = \"two.sided\"\n  )$power\n}\n\n# --- UI -------------------------------------------------------------------\nui <- fluidPage(\n  theme = dark_theme,\n  div(\n    class = \"no-stack\",\n    \n    # LEFT PANEL ------------------------------------------------------------\n    div(\n      class = \"left\",\n      h2(class = \"title\", \"One-sample t-test: Evaluate a completed test\"),\n      \n      numericInput(\"t_obs\", \"Observed t-statistic\", value = 2.0, step = 0.1),\n      numericInput(\"n_obs\", \"Observed sample size n\", value = 30, min = 3, step = 1),\n      \n      checkboxInput(\"use_sesoi\", \"Use smallest effect size of interest (override observed)\", value = FALSE),\n      conditionalPanel(\n        condition = \"input.use_sesoi\",\n        tagList(\n          selectInput(\n            \"sesoi\", \"Choose SESOI (Cohen's d)\",\n            choices  = c(\"Small (0.2)\" = 0.2, \"Medium (0.5)\" = 0.5, \"Large (0.8)\" = 0.8),\n            selected = 0.5, selectize = FALSE\n          ),\n          tags$div(\n            style = \"font-size:12.5px; opacity:.9; margin-top:-6px;\",\n            \"When SESOI is on, the curve ignores the observed t and uses this d to plan sample size.\"\n          )\n        )\n      ),\n      \n      selectInput(\"alpha\", HTML(\"Significance level (&alpha;)\"),\n                  choices = c(0.10, 0.05, 0.01), selected = 0.05),\n      \n      tags$details(\n        tags$summary(\"What does this show?\"),\n        tags$ul(\n          tags$li(HTML(\"Observed effect (standardized): <code>d̂ = t/√n<\/code>.\")),\n          tags$li(HTML(\"Power at the observed n is computed using <code>d̂<\/code> (or SESOI if selected).\")),\n          tags$li(HTML(paste0(\n            \"The curve shows power vs n for a 'fixed effect':\",\n            \"<br>&nbsp;&nbsp;&bull; with SESOI off this 'fixed effect' is <code>d̂ = t/√n<\/code> from your observed test;\",\n            \"<br>&nbsp;&nbsp;&bull; with SESOI on, the 'fixed effect' is your chosen SESOI <code>d<\/code>. The plot shows the required <code>n<\/code> for 80% power.\"\n          )))\n        )\n      )\n    ),\n    \n    # RIGHT PANEL -----------------------------------------------------------\n    div(\n      class = \"right\",\n      uiOutput(\"power_card\"),\n      uiOutput(\"link_card\"),\n      div(id = \"plotBox\", plotOutput(\"power_plot\", height = \"360px\")),\n      br(),\n      fluidRow(\n        column(6, tableOutput(\"rule_table\")),\n        column(6, tableOutput(\"summary_table\"))\n      )\n    )\n  )\n)\n\n# --- Server ---------------------------------------------------------------\nserver <- function(input, output, session) {\n  \n  # Reactive state: observed, effect used for power, and validity guard\n  rv <- reactive({\n    n_obs <- suppressWarnings(as.integer(input$n_obs))\n    t_obs <- suppressWarnings(as.numeric(input$t_obs))\n    alpha <- suppressWarnings(as.numeric(input$alpha))\n    \n    ok <- is.finite(n_obs) && n_obs >= 3 &&\n      is.finite(t_obs) && is.finite(alpha)\n    \n    d_hat <- if (ok) t_obs / sqrt(n_obs) else NA_real_\n    use_d <- if (!ok) {\n      NA_real_\n    } else if (isTRUE(input$use_sesoi)) {\n      as.numeric(input$sesoi)\n    } else {\n      d_hat\n    }\n    \n    list(\n      n_obs = n_obs, t_obs = t_obs, alpha = alpha,\n      d_hat = d_hat, d_eff = use_d,\n      ok = ok\n    )\n  })\n  \n  # Power card at observed n (guarded for NA while typing)\n  output$power_card <- renderUI({\n    x <- rv()\n    if (!isTRUE(x$ok)) {\n      return(\n        wellPanel(\n          tags$div(HTML(\n            \"<div style='font-size:1.1em'>Enter a numeric t and n ≥ 3 to see power.<\/div>\"\n          ))\n        )\n      )\n    }\n    \n    pow <- power_one_sample(x$d_eff, x$n_obs, x$alpha)\n    label <- if (pow < 0.5) \"Low\" else if (pow < 0.8) \"Moderate\" else \"High\"\n    bg <- if (pow < 0.5) \"#603b53\" else if (pow < 0.8) \"#6b5735\" else \"#2f4740\"\n    \n    src_label <- if (isTRUE(input$use_sesoi)) {\n      sprintf(\"SESOI d = %.2f\", x$d_eff)\n    } else {\n      sprintf(\"Observed d̂ = %.2f (from t = %.2f, n = %d)\", x$d_hat, x$t_obs, x$n_obs)\n    }\n    \n    wellPanel(\n      tags$div(\n        style = paste0(\"background:\", bg, \"; padding:14px; border-radius:8px;\"),\n        HTML(sprintf(\n          \"<div style='font-size:1.2em'><b>Estimated power at n = %d<\/b><\/div>\n           <div style='font-size:2em; line-height:1.2; margin-top:4px'><b>%0.1f%%<\/b> — %s<\/div>\n           <div style='margin-top:6px'><small>%s; α = %.2f (two-sided)<\/small><\/div>\",\n          x$n_obs, 100*pow, label, src_label, x$alpha\n        ))\n      )\n    )\n  })\n  \n  # Link card: mapping and interpretation (guarded for NA)\n  output$link_card <- renderUI({\n    x <- rv()\n    if (!isTRUE(x$ok)) {\n      return(\n        wellPanel(HTML(\n          \"<div><b>Effect link<\/b><\/div>\n         <div style='margin-top:4px'>t(n) = d × √n — enter t and n to see the mapping.<\/div>\"\n        ))\n      )\n    }\n    \n    if (isTRUE(input$use_sesoi)) {\n      # SESOI ON: d is fixed at chosen SESOI\n      msg <- sprintf(\n        \"<div><b>Effect link<\/b><\/div>\n       <div style='margin-top:4px'>Curve assumes your SESOI: d = %.2f (fixed). Changing n moves the dot; the curve stays the same.<\/div>\n       <div style='margin-top:4px'>t(n) = d × √n; at n = %d, implied t = %.3f.<\/div>\",\n        x$d_eff, x$n_obs, x$d_eff * sqrt(x$n_obs)\n      )\n    } else {\n      # SESOI OFF: d-hat is recomputed from current t and n\n      msg <- sprintf(\n        \"<div><b>Effect link<\/b><\/div>\n       <div style='margin-top:4px'>Curve uses the observed effect d̂ = t/√n computed from your current inputs. If you change t or n, d̂ (and the curve) update.<\/div>\n       <div style='margin-top:4px'>Current: d̂ = %.3f (t = %.3f, n = %d).<\/div>\",\n        x$d_hat, x$t_obs, x$n_obs\n      )\n    }\n    \n    wellPanel(HTML(msg))\n  })\n  \n  # Plot: power vs n at fixed d_eff; SESOI shows required n for 80% power\n  output$power_plot <- renderPlot({\n    x <- rv()\n    validate(need(isTRUE(x$ok), \"Enter a numeric t and n ≥ 3 to see the power curve.\"))\n    \n    n_seq <- seq(5, 200, by = 1)\n    pow <- vapply(n_seq, function(nn) power_one_sample(x$d_eff, nn, x$alpha), numeric(1))\n    df  <- data.frame(n = n_seq, power = pow)\n    \n    pow_now <- power_one_sample(x$d_eff, x$n_obs, x$alpha)\n    dot_col <- if (pow_now < 0.5) \"#805e75\" else if (pow_now < 0.8) \"#8e7446\" else \"#3b6558\"\n    \n    n_req <- if (isTRUE(input$use_sesoi)) {\n      ceiling(stats::power.t.test(\n        delta = x$d_eff, sd = 1, sig.level = x$alpha,\n        type = \"one.sample\", alternative = \"two.sided\",\n        power = 0.80\n      )$n)\n    } else NA_integer_\n    \n    x_breaks <- unique(sort(c(pretty(df$n), x$n_obs,\n                              if (!is.na(n_req) && n_req <= max(n_seq)) n_req else NULL)))\n    \n    title_txt <- if (isTRUE(input$use_sesoi)) {\n      sprintf(\"Power vs n (one-sample; SESOI d = %.2f, α = %.2f)\", x$d_eff, x$alpha)\n    } else {\n      sprintf(\"Power vs n (one-sample; observed d̂ = %.2f, α = %.2f)\", x$d_hat, x$alpha)\n    }\n    \n    p <- ggplot(df, aes(n, power)) +\n      # make all geoms white on dark bg\n      geom_line(linewidth = 1, color = \"white\") +\n      geom_hline(yintercept = 0.80, linetype = 2, color = \"white\") +\n      geom_vline(xintercept = x$n_obs, linetype = 3, color = \"white\") +\n      geom_point(\n        data = data.frame(n = x$n_obs, power = pow_now),\n        aes(n, power), size = 6, shape = 16, color = dot_col\n      ) +\n      coord_cartesian(ylim = c(0, 1)) +\n      scale_x_continuous(breaks = x_breaks) +\n      labs(x = \"Sample size (n)\", y = \"Power\", title = title_txt) +\n      theme(\n        # transparent image bg (so page shows through)\n        plot.background  = element_rect(fill = NA, color = NA),\n        panel.background = element_rect(fill = NA, color = NA),\n        \n        # all text to white\n        text       = element_text(color = \"white\"),\n        axis.title = element_text(size = 16, face = \"bold\", color = \"white\"),\n        axis.text  = element_text(size = 14, color = \"white\"),\n        plot.title = element_text(size = 18, face = \"bold\", color = \"white\"),\n        \n        panel.grid.major = element_line(linewidth = 0.1, color = scales::alpha(\"white\", 0.55)),\n        panel.grid.minor = element_blank(),  # ← no minor gridlines\n        axis.ticks       = element_line(color = \"white\")\n      )\n    \n    if (!is.na(n_req)) {\n      if (n_req <= max(n_seq)) {\n        p <- p +\n          geom_vline(xintercept = n_req, linetype = \"dotted\", linewidth = 0.9, color = \"white\") +\n          annotate(\"label\", x = n_req, y = 0.05,\n                   label = sprintf(\"n ≈ %d @ 0.80 power\", n_req),\n                   size = 4.5, label.size = 0, fill = NA, color = ORANGE)\n      } else {\n        p <- p +\n          annotate(\"label\", x = max(n_seq) - 5, y = 0.05,\n                   label = sprintf(\"n ≈ %d needed (off-plot) @ 0.80 power\", n_req),\n                   size = 4.5, label.size = 0, fill = NA, color = ORANGE)\n      }\n    }\n    \n    p\n  }, bg = \"transparent\")\n  \n  \n  \n  # Reference tables (compact, no striping)\n  output$rule_table <- renderTable({\n    data.frame(\n      `Effect Size`   = c(\"Large\", \"Small\", \"Small\", \"Large\"),\n      `Sample Size`   = c(\"Small\", \"Large\", \"Small\", \"Large\"),\n      `Likely Outcome`= c(\n        \"May still detect effect\",\n        \"Likely to detect even small effect\",\n        \"Low power — may miss real effect\",\n        \"High chance of detecting effect\"\n      ),\n      check.names = FALSE\n    )\n  }, bordered = TRUE, striped = FALSE, spacing = \"xs\")\n  \n  output$summary_table <- renderTable({\n    data.frame(\n      Factor = c(\"Effect Size\", \"Sample Size\", \"Power\"),\n      `What It Affects` = c(\n        \"Practical importance of the finding\",\n        \"Precision and power of the test\",\n        \"Ability to detect true effects\"\n      ),\n      check.names = FALSE\n    )\n  }, bordered = TRUE, striped = FALSE, spacing = \"xs\")\n}\n\n# --- Run ------------------------------------------------------------------\nshinyApp(ui, server)\n","type":"text"}]
