[{"name":"app.R","content":"# app.R — Split-normal (mean/median/mode) — ShinyLive ready, tighter height + stats line\nlibrary(shiny)\nlibrary(bslib)\n\n# ----- split-normal helpers (no extra packages) -----\ndsplitnorm <- function(x, mu, sL, sR) {\n  cst <- sqrt(2 / pi) / (sL + sR)\n  y <- numeric(length(x))\n  left <- x <= mu\n  y[left]  <- cst * exp(-0.5 * ((x[left]  - mu) / sL)^2)\n  y[!left] <- cst * exp(-0.5 * ((x[!left] - mu) / sR)^2)\n  y\n}\nmean_splitnorm <- function(mu, sL, sR) mu + sqrt(2 / pi) * (sR - sL)\n\nmap_params_simple <- function(m, med, mu, floor_sigma = 3, width_base = 6, c_med = 4) {\n  D <- (m - mu) / sqrt(2 / pi)\n  w_raw <- 0.5 + 0.5 * tanh((mu - med) / c_med)\n  w <- min(max(w_raw, 0.05), 0.95)\n  sep <- mean(abs(c(m - mu, med - mu, m - med)))\n  T_core <- width_base + 2 * sep\n  sL0 <- w * T_core - D/2\n  sR0 <- (1 - w) * T_core + D/2\n  bump <- max(0, floor_sigma - min(sL0, sR0))\n  sL <- max(sL0 + bump, 1e-3); sR <- max(sR0 + bump, 1e-3)\n  list(mu = mu, sL = sL, sR = sR)\n}\n\n# ----- Theme tokens -----\nLIGHT_BLUE <- \"#767da2\"\nLIGHT_GREY <- \"#d1d4e0\"\nORANGE     <- \"#cd6118\"\nGREEN      <- \"#009E73\"\n\ndark_theme <- bs_theme(\n  version = 5, bg = \"#1d1f2b\", fg = \"#e1e2ea\",\n  primary = ORANGE, secondary = \"#5a5f80\"\n) |>\n  bs_add_rules(\"\n    :root{\n      --bs-body-font-family: 'Lexend', system-ui, -apple-system, Segoe UI, Roboto, 'Helvetica Neue', Arial, sans-serif;\n      --bs-font-monospace: 'Recursive', ui-monospace, SFMono-Regular, Menlo, Consolas, 'Liberation Mono', monospace;\n    }\n  \") |>\n  bs_add_rules(paste0(\"\n    .container-fluid{ max-width:1100px; padding-top:calc(16px + env(safe-area-inset-top)); }\n    .shiny-input-container{ margin-bottom:10px; }\n\n    .no-stack{ display:flex; gap:16px; align-items:flex-start; }\n    .no-stack .left{ flex:0 0 320px; min-width:260px; }\n    .no-stack .right{ flex:1 1 auto; min-width:0; }\n\n    #plotBox{\n      background: var(--bs-body-bg) !important;\n      border: 1.5px solid \", LIGHT_BLUE, \" !important;\n      padding: 12px; border-radius: .6rem; box-shadow:none;\n    }\n\n    .form-control, .form-select, .selectize-input{\n      background-color:\", LIGHT_BLUE, \" !important; color:var(--bs-body-color) !important;\n      border:1px solid \", LIGHT_BLUE, \" !important; box-shadow:none !important;\n    }\n    .form-control:focus, .form-select:focus, .selectize-input.focus{\n      border-color:\", ORANGE, \" !important; outline:0 !important;\n      box-shadow:0 0 0 .15rem rgba(205,97,24,.35) !important;\n    }\n\n    .irs--shiny .irs-bar, .irs--shiny .irs-handle>i:first-child, .irs--shiny .irs-handle{\n      background:\", LIGHT_BLUE, \" !important; border-color:\", LIGHT_BLUE, \" !important;\n    }\n    .irs--shiny .irs-line, .irs--shiny .irs-bar-edge{ background:#5a5f80 !important; border-color:#5a5f80 !important; }\n    .irs--shiny .irs-single, .irs--shiny .irs-from, .irs--shiny .irs-to,\n    .irs--shiny .irs-min, .irs--shiny .irs-max, .irs--shiny .irs-grid-text{\n      color: var(--bs-body-color) !important;\n    }\n\n    .legend-dot { display:inline-block; width:14px; height:14px; border-radius:7px; margin-right:6px; }\n    .legend-item { margin-bottom:6px; }\n    .sidebar-title { margin-top:8px; font-weight:600; }\n\n    @media (max-width:576px){\n      .no-stack{ flex-direction:column; gap:12px; }\n      .no-stack .left, .no-stack .right{ flex:1 1 100%; min-width:0; }\n      .no-stack .left .shiny-input-container .control-label { margin-top:12px; }\n      .no-stack .left .shiny-input-container:first-of-type .control-label { margin-top:8px; }\n      .container-fluid{ padding-left:12px; padding-right:12px; }\n    }\n  \"))\n\nui <- page_fluid(\n  theme = dark_theme,\n  tags$head(\n    tags$link(rel=\"preconnect\", href=\"https://fonts.googleapis.com\"),\n    tags$link(rel=\"preconnect\", href=\"https://fonts.gstatic.com\", crossorigin=\"anonymous\"),\n    tags$link(\n      href=\"https://fonts.googleapis.com/css2?family=Lexend:wght@300;400;500&family=Recursive:wght,MONO@400,1&display=swap\",\n      rel=\"stylesheet\"\n    ),\n    tags$script(src=\"https://cdn.jsdelivr.net/npm/iframe-resizer/js/iframeResizer.contentWindow.min.js\"),\n    tags$script(HTML(\"\n      document.addEventListener('shiny:idle', function(){\n        if (window.parentIFrame && window.parentIFrame.size) window.parentIFrame.size();\n      });\n    \"))\n  ),\n  \n  # Dynamic-height helpers\n  tags$head(\n    tags$style(HTML(\"#plot img{display:block;width:100%;height:auto!important;}\")),\n    tags$script(HTML(\"\n      (function () {\n        function send() {\n          if (!window.Shiny) return;\n          Shiny.setInputValue('vh_px', window.innerHeight, {priority:'event'});\n          Shiny.setInputValue('resizeTick', Date.now(),     {priority:'event'});\n        }\n        window.addEventListener('load', send, {once:true});\n        document.addEventListener('shiny:connected', send);\n        window.addEventListener('resize', send);\n        window.addEventListener('orientationchange', send);\n      })();\n    \")),\n    tags$script(HTML(\"\n      Shiny.addCustomMessageHandler('setSplitHeight', function(px){\n        var el = document.getElementById('plot');\n        if (el) el.style.height = String(px) + 'px';\n      });\n    \"))\n  ),\n  \n  div(class = \"no-stack\",\n      div(class = \"left\",\n          sliderInput(\"mean\",   \"Mean\",        min = -20, max = 20, value = 0, step = 0.1),\n          sliderInput(\"median\", \"Median\",      min = -20, max = 20, value = 0, step = 0.1),\n          sliderInput(\"mode\",   \"Mode (peak)\", min = -20, max = 20, value = 0, step = 0.1),\n          div(class = \"sidebar-title\", \"Colour key\"),\n          div(class = \"legend-item\", span(class=\"legend-dot\", style = paste0(\"background:\", ORANGE)),     \"Mean\"),\n          div(class = \"legend-item\", span(class=\"legend-dot\", style = paste0(\"background:\", LIGHT_GREY)), \"Median\"),\n          div(class = \"legend-item\", span(class=\"legend-dot\", style = paste0(\"background:\", GREEN)),      \"Mode\"),\n          br(),\n          actionButton(\"reset\", \"Reset to 0,0,0\", class = \"btn btn-secondary\")\n      ),\n      div(class = \"right\",\n          div(id = \"plotBox\",\n              plotOutput(\"plot\"),\n              br(),\n              tags$small(textOutput(\"stats\"))   # <-- shows Mean/Median/Mode values\n          )\n      )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # Tighter dynamic height (shorter than before)\n  plotHeight <- reactive({\n    w <- session$clientData$output_plot_width\n    if (is.null(w) || !is.finite(w) || w <= 0) w <- 360\n    compact  <- (w < 520)\n    # slightly smaller scalers + mins to reduce vertical frame\n    h_from_w <- if (compact) max(220, 0.40 * w) else max(240, min(480, 0.50 * w))\n    vh <- input$vh_px\n    if (is.numeric(vh) && is.finite(vh) && vh > 0) {\n      cap <- if (compact) 0.44 * vh else 0.48 * vh\n      h_from_w <- min(h_from_w, cap)\n    }\n    round(h_from_w)\n  })\n  \n  observeEvent(list(plotHeight(), input$resizeTick), {\n    session$sendCustomMessage('setSplitHeight', plotHeight())\n  }, ignoreInit = FALSE)\n  \n  observeEvent(input$reset, {\n    updateSliderInput(session, \"mean\",   value = 0)\n    updateSliderInput(session, \"median\", value = 0)\n    updateSliderInput(session, \"mode\",   value = 0)\n  })\n  \n  output$plot <- renderPlot({\n    m   <- input$mean\n    med <- input$median\n    mu  <- input$mode\n    p   <- map_params_simple(m, med, mu)\n    \n    # X-range based on asymmetric spreads\n    left_span  <- 3 * p$sL\n    right_span <- 3 * p$sR\n    x_min <- min(-20, mu - left_span)\n    x_max <- max( 20, mu + right_span)\n    pad   <- 0.03 * (x_max - x_min)\n    x_min <- x_min - pad\n    x_max <- x_max + pad\n    \n    x <- seq(x_min, x_max, length.out = 1600)\n    y <- dsplitnorm(x, p$mu, p$sL, p$sR)\n    y_max <- suppressWarnings(max(y, na.rm = TRUE)); if (!is.finite(y_max) || y_max <= 0) y_max <- 1e-6\n    \n    # container width\n    wcd   <- session$clientData$output_plot_width\n    w_use <- if (is.null(wcd) || !is.finite(wcd) || wcd <= 0) 360 else wcd\n    tiny  <- (w_use < 420)\n    \n    op <- par(no.readonly = TRUE); on.exit(par(op), add = TRUE)\n    par(\n      fg = \"#e1e2ea\", col.axis = \"#e1e2ea\", col.lab = \"#e1e2ea\", col = \"#e1e2ea\",\n      # trimmed margins to save vertical space\n      mar  = if (tiny) c(2.6, 3.2, 1.4, 0.8) else c(3.6, 4.2, 2.2, 1.0),\n      mgp  = if (tiny) c(1.9, 0.5, 0)        else c(2.5, 0.8, 0),\n      xaxs = if (tiny) \"i\" else \"r\",\n      yaxs = if (tiny) \"i\" else \"r\",\n      cex.axis = if (tiny) 0.90 else 1.00,\n      cex.lab  = if (tiny) 0.95 else 1.05\n    )\n    \n    plot(x, y, type = \"n\",\n         xlab = \"\", ylab = \"Density\",\n         xlim = c(x_min, x_max),\n         ylim = c(0, y_max * (if (tiny) 1.06 else 1.14)),\n         axes = TRUE, frame.plot = TRUE)\n    lines(x, y, lwd = 2)\n    \n    # Guides\n    abline(v = m,   col = ORANGE,     lwd = 2)\n    abline(v = med, col = LIGHT_GREY, lwd = 2)\n    abline(v = mu,  col = GREEN,      lwd = 2)\n    \n    # Labels\n    usr   <- par(\"usr\")\n    y_lab <- usr[4] - (if (tiny) 0.07 else 0.09) * diff(usr[3:4])\n    clamp <- function(z, lo = x_min, hi = x_max) pmin(hi, pmax(lo, z))\n    text(clamp(m),   y_lab, \"Mean\",   col = ORANGE,     cex = if (tiny) 0.85 else 0.95)\n    text(clamp(med), y_lab, \"Median\", col = LIGHT_GREY, cex = if (tiny) 0.85 else 0.95)\n    text(clamp(mu),  y_lab, \"Mode\",   col = GREEN,      cex = if (tiny) 0.85 else 0.95)\n  },\n  width  = function() {\n    w <- session$clientData$output_plot_width\n    if (is.null(w) || !is.finite(w) || w <= 0) w <- 360\n    round(max(280, min(1100, w)))\n  },\n  height = function() plotHeight(),\n  res = 96, execOnResize = TRUE,\n  bg = \"transparent\"\n  )\n  \n  # Show selected values under the chart\n  output$stats <- renderText({\n    m <- input$mean; med <- input$median; mu <- input$mode\n    p <- map_params_simple(m, med, mu)\n    sprintf(\n      \"Mean = %.2f   |   Median = %.2f   |   Mode = %.2f\",\n      m, med, mu, p$sL, p$sR\n    )\n  })\n}\n\nshinyApp(ui, server)\n","type":"text"},{"name":"Shiny Upload.R","content":"\n# 1. Install and load rsconnect\ninstall.packages(\"rsconnect\")\nlibrary(rsconnect)\n\n# 2. Connect R to my shinyapps.io account\n# Run this once on your machine (you can find the info in your shinyapps.io dashboard under Tokens):\n\nrsconnect::setAccountInfo(name='drflorianreiche',\n                          token='B18DD6C3B257DBDB66154A0808E81DDC',\n                          secret='q6XwNl4ha6DchuHWAcH6/MKCA1XbYs606zWdl9NB')\n\n# 3. Prepare your Shiny app\n\nshiny::runApp(\"~/Dropbox/AQDR/shiny/shiny-mean-median-mode\")\n\n# 4. Deploy / update the app\n\nrsconnect::deployApp(\"~/Dropbox/AQDR/shiny/shiny-mean-median-mode\")\n\n","type":"text"}]
